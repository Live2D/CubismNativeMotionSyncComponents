cmake_minimum_required(VERSION 3.16)

# Set app name.
set(APP_NAME Demo)
# Set directory paths.
set(SDK_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../../../..)
file(GLOB NATIVE_DIR "${SDK_ROOT_PATH}/../CubismNativeSamples")
# Find non-zip file.
if(NOT NATIVE_DIR)
  file(GLOB TMP_DIR "${SDK_ROOT_PATH}/../CubismSdkForNative*")
  foreach(DIR ${TMP_DIR})
    get_filename_component(LASTNAME ${DIR} NAME)
    if(NOT "${LASTNAME}" MATCHES "\\.zip$")
      set(NATIVE_DIR ${DIR})
      break()
    endif()
  endforeach()
endif()
set(NATIVE_PATH ${NATIVE_DIR} CACHE PATH [[Native File Path]] FORCE)
set(NATIVE_CORE_PATH $CACHE{NATIVE_PATH}/Core)
set(NATIVE_FRAMEWORK_PATH $CACHE{NATIVE_PATH}/Framework)
set(MOTIONSYNC_FRAMEWORK_PATH ${SDK_ROOT_PATH}/Framework)
set(THIRD_PARTY_PATH $CACHE{NATIVE_PATH}/Samples/OpenGL/thirdParty)
set(STB_PATH ${THIRD_PARTY_PATH}/stb)
set(GLEW_PATH ${THIRD_PARTY_PATH}/glew)
set(GLFW_PATH ${THIRD_PARTY_PATH}/glfw)
set(RES_PATH ${SDK_ROOT_PATH}/Samples/Resources)
set(MOTIONSYNC_CORE_DIR MotionSyncCore)
set(MOTIONSYNC_CRI_LIB_PATH ${SDK_ROOT_PATH}/Core/CRI/dll/macOS)

# Set project.
project(${APP_NAME})

# Define output directory.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin/${APP_NAME})
# Set configuration (Release and Debug only).
set(CMAKE_CONFIGURATION_TYPES Debug Release
  CACHE STRING "Configurations" FORCE
)
# Suppress generation of ZERO_CHECK project.
set(CMAKE_SUPPRESS_REGENERATION ON)

# Surpress GLEW and GLFW process.
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)
set(BUILD_UTILS OFF CACHE BOOL "" FORCE)

# Specify version of compiler.
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Add Cubism Core.
# Import as static library.
add_library(Live2DCubismCore STATIC IMPORTED)
# Get architecture.
EXECUTE_PROCESS( COMMAND uname -m COMMAND tr -d '\n' OUTPUT_VARIABLE ARCHITECTURE )
# Set library path and inlude path.
set_target_properties(Live2DCubismCore
  PROPERTIES
    IMPORTED_LOCATION ${NATIVE_CORE_PATH}/lib/macos/${ARCHITECTURE}/libLive2DCubismCore.a
    INTERFACE_INCLUDE_DIRECTORIES ${NATIVE_CORE_PATH}/include
)

# Add GLEW ,GLFW.
add_subdirectory(${GLEW_PATH}/build/cmake ${CMAKE_CURRENT_BINARY_DIR}/glew)
add_subdirectory(${GLFW_PATH} ${CMAKE_CURRENT_BINARY_DIR}/glfw)

# Specify Cubism Framework rendering.
set(FRAMEWORK_SOURCE OpenGL)
# Add Cubism Native Framework.
add_subdirectory(${NATIVE_FRAMEWORK_PATH} ${CMAKE_CURRENT_BINARY_DIR}/Framework)
# Add rendering definition to framework.
target_compile_definitions(Framework PUBLIC CSM_TARGET_MAC_GL)
# Add include path of GLEW to framework.
target_include_directories(Framework PUBLIC ${GLEW_PATH}/include)
# Link libraries to framework.
target_link_libraries(Framework Live2DCubismCore glew_s)

# Specify Cubism MotionSync Framework rendering.
set(MOTIONSYNC_FRAMEWORK_SOURCE OpenGL)
# Add Cubism Native MotionSync Framework.
add_subdirectory(${MOTIONSYNC_FRAMEWORK_PATH} ${CMAKE_CURRENT_BINARY_DIR}/MotionSyncFramework)
# Add rendering definition to MotionSync framework.
target_compile_definitions(MotionSyncFramework PUBLIC CSM_TARGET_MAC_GL)
# Add include path of GLEW to MotionSync framework.
target_include_directories(MotionSyncFramework PUBLIC ${GLEW_PATH}/include)
# Link libraries to MotionSync framework.
target_link_libraries(MotionSyncFramework Live2DCubismCore glew_s)

# Find opengl libraries.
find_package(OpenGL REQUIRED)

# Find libraries.
find_library(AUDIOTOOLBOX_LIBRARY AudioToolBox)

# Set macro to MotionSync Framework.
target_compile_definitions(MotionSyncFramework PRIVATE MOTIONSYNC_CORE_CRI_LIB_PATH="${MOTIONSYNC_CORE_DIR}/")

# Make executable app.
add_executable(${APP_NAME})
# Add source files.
add_subdirectory(src)
# Link libraries to app.
target_link_libraries(${APP_NAME}
  Framework
  MotionSyncFramework
  glfw
  ${OPENGL_LIBRARIES}
  ${AUDIOTOOLBOX_LIBRARY}
)
# Specify include directories.
target_include_directories(${APP_NAME} PRIVATE ${STB_PATH})

# Copy resource directory to build directory.
add_custom_command(
  TARGET ${APP_NAME}
  POST_BUILD
  COMMAND
    ${CMAKE_COMMAND} -E
      copy_directory ${RES_PATH} $<TARGET_FILE_DIR:${APP_NAME}>/Resources
)

# Copy MotionSync Lib directory to build directory.
add_custom_command(
  TARGET ${APP_NAME}
  POST_BUILD
  COMMAND
    ${CMAKE_COMMAND} -E
      copy_directory ${MOTIONSYNC_CRI_LIB_PATH} $<TARGET_FILE_DIR:${APP_NAME}>/${MOTIONSYNC_CORE_DIR}
)

# You can change target that renderer draws by enabling following definition.
#
# * USE_RENDER_TARGET
#   Renderer draws to target of LAppView.
# * USE_MODEL_RENDER_TARGET
#   Renderer draws to target of each LAppModel.
# * default
#   Renderer draws to default main framebuffer.
#
# INFO: USE_RENDER_TARGET has higher priority than USE_MODEL_RENDER_TARGET.
#
# target_compile_definitions(${APP_NAME}
#   PRIVATE
#     USE_RENDER_TARGET
#     USE_MODEL_RENDER_TARGET
# )
